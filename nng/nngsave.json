{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,\n\n"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "-- rw h,\n-- refl,\nrw ← h,\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\nrw add_zero,\nrefl,"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\nrw add_zero,\nrefl,\nrw add_succ,\nrw hd,\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\nrw add_zero,\nrw add_zero,\nrefl,\nrw add_succ,\nrw add_succ,\nrw add_succ,\nrw hd,\nrefl,"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with d hd,\nrw add_zero,\nrw add_zero,\nrefl,\nrw add_succ,\nrw add_succ,\nrw hd,\nrefl,"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with d hd,\nrw add_zero,\nrw zero_add,\nrefl,\nrw add_succ,\nrw succ_add,\nrw hd,\nrefl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw add_succ,\nrw add_zero,\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm,\nrw add_comm a c,\nrw add_assoc,\nrefl,"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with n hn,\nrw mul_zero,\nrefl,\nrw mul_succ,\nrw add_zero,\nrw hn,\nrefl,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw mul_succ,\nrw mul_zero,\nrw zero_add,\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with n hn,\nrw mul_zero,\nrefl,\nrw mul_succ,\nrw hn,\nrw succ_eq_add_one,\nrefl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\nrw add_zero,\nrw mul_zero,\nrw add_zero,\nrefl,\nrw add_succ,\nrw mul_succ,\nrw mul_succ,\nrw hc,\nsimp,"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\nrw mul_zero,\nrw mul_zero,\nrw mul_zero,\nrefl,\nrw mul_succ,\nrw mul_succ,\nrw mul_add,\nrw hd,\nrefl,"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\nrw mul_zero,\nrw mul_zero,\nrw add_zero,\nrefl,\nrw mul_succ,\nrw add_succ,\nrw add_succ,\nrw mul_succ,\nrw hc,\nsimp,\n--rw add_right_comm,\n--refl,"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "-- induction t with c hc,\n-- rw mul_zero,\n-- rw mul_zero,\n-- rw mul_zero,\n-- rw add_zero,\n-- refl,\n-- rw mul_succ,\n-- rw mul_succ,\n-- rw mul_succ,\n-- rw hc,\n-- simp,\n\n-- induction b with c hc,\n-- rw add_zero,\n-- rw zero_mul,\n-- rw add_zero,\n-- refl,\n-- rw add_succ,\n-- rw succ_mul,\n-- rw succ_mul,\n-- rw hc,\n-- simp,\n\ninduction a with c hc,\nrw zero_add,\nrw zero_mul,\nrw zero_add,\nrefl,\nrw succ_add,\nrw succ_mul,\nrw succ_mul,\nrw hc,\nsimp,"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with c hc,\nrw mul_zero,\nrw zero_mul,\nrefl,\nrw mul_succ,\nrw succ_mul,\nrw hc,\nrefl,\n\n-- induction a with c hc,\n-- rw zero_mul,\n-- rw mul_zero,\n-- refl,\n-- rw succ_mul,\n-- rw mul_succ,\n-- rw hc,\n-- refl,"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "induction a with x hx,\nrw zero_mul,\nrw zero_mul,\nrw mul_zero,\nrefl,\nrw succ_mul,\nrw succ_mul,\nrw hx,\nrw mul_add,\nrefl,"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero,\nrefl,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,\nrw mul_zero,\nrefl,"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw pow_succ,\nrw pow_zero,\nrw one_mul,\nrefl,"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with n hn,\nrw pow_zero,\nrefl,\nrw pow_succ,\nrw hn,\nrw mul_one,\nrefl,"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with x hx,\nrw add_zero,\nrw pow_zero,\nrw mul_one,\nrefl,\nrw add_succ,\nrw pow_succ,\nrw pow_succ,\nrw hx,\nsimp,"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with m hm,\nrw pow_zero,\nrw pow_zero,\nrw pow_zero,\nrw mul_one,\nrefl,\nrw pow_succ,\nrw pow_succ,\nrw pow_succ,\nrw hm,\nsimp,"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with x hx,\nrw pow_zero,\nrw mul_zero,\nrw pow_zero,\nrefl,\nrw pow_succ,\nrw mul_succ,\nrw pow_add,\nrw hx,\nrefl,"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\nrw one_eq_succ_zero,\n\nrw pow_succ,\nrw pow_succ,\nrw pow_zero,\nrw one_mul,\n\nrw pow_succ,\nrw pow_succ,\nrw pow_zero,\nrw one_mul,\n\nrw pow_succ,\nrw pow_succ,\nrw pow_zero,\nrw one_mul,\n\nrw succ_mul,\nrw succ_mul,\nrw zero_mul,\nrw zero_add,\n\nrw add_mul,\nrw mul_add,\nrw mul_add,\nrw add_mul,\n\nsimp,"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\nexact 3 * n + 2,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "-- exact l(j(h(p))),\nhave q := h(p),\nhave t : T := j(q),\nhave u : U := l(t),\nexact u,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "-- exact l(j(h(p))),\nhave q := h(p),\nhave t : T := j(q),\nhave u : U := l(t),\nexact u,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "-- intro p,\n-- intro q,\nintros p q,\nexact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro f,\nintro h,\nintro p,\n-- intros f h p,\nhave r : Q → R := f p,\napply r,\napply h,\nexact p,"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intro a,\nintro b,\nintro c,\napply b,\napply a,\nexact c,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intro f,\nintro h,\nintro p,\napply h,\napply f,\nexact p,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\napply f15,\napply f11,\napply f9,\napply f8,\napply f5,\napply f2,\napply f1,\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h p,"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "-- exact l(j(h(p))),\nhave q : Q := h(p),\nhave t : T := j(q),\nhave u : U := l(t),\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "-- exact l(j(h(p))),\nhave q : Q := h(p),\nhave t : T := j(q),\nhave u : U := l(t),\nexact u,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\nintro q,\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro f,\nintro h,\nintro p,\n\nhave j : Q → R := f p,\napply j,\napply h,\nexact p,\n\n-- apply (f p),\n-- apply h,\n-- exact p,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\nintro hqr,\nintro p,\napply hqr,\napply hpq,\nexact p,"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "repeat {rw not_iff_imp_false},\nintro hpq,\nintro hqf,\nintro hp,\napply hqf,\napply hpq,\nexact hp,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "-- cc,\nintro a,\napply f15,\napply f11,\napply f9,\napply f8,\napply f5,\napply f2,\napply f1,\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\nexact p,\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\ncases h with p q,\nsplit,\nexact q,\nexact p,"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intro h,\nintro j,\nsplit,\n\ncases h with p q,\nexact p,\n\ncases j with q r,\nexact r,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "----------------------------------------\nintro h,\ncases h with hp hq,\nintro l,\ncases l with lq lr,\nsplit,\n\nintro p,\n--exact lq(hp(p)),\napply lq,\napply hp,\nexact p,\n\nintro r,\n--exact hq(lr(r)),\napply hq,\napply lr,\nexact r,\n\n\n----------------------------------------\n--intro h,\n--intro l,\n--split,\n--\n--intro p,\n--cases h with hp hq,\n--cases l with lq lr,\n--apply lq,\n--apply hp,\n--exact p,\n--\n--intro r,\n--cases h with hp hq,\n--cases l with lq lr,\n--apply hq,\n--apply lr,\n--exact r,\n----------------------------------------"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "----------------------------------------\nintro h,\ncases h with hp hq,\nintro l,\ncases l with lq lr,\nsplit,\n\nintro p,\n--exact lq(hp(p)),\napply lq,\napply hp,\nexact p,\n\nintro r,\n--exact hq(lr(r)),\napply hq,\napply lr,\nexact r,\n\n\n----------------------------------------\n--intro h,\n--intro l,\n--split,\n--\n--intro p,\n--cases h with hp hq,\n--cases l with lq lr,\n--apply lq,\n--apply hp,\n--exact p,\n--\n--intro r,\n--cases h with hp hq,\n--cases l with lq lr,\n--apply hq,\n--apply lr,\n--exact r,\n----------------------------------------"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\nright,\nexact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\ncases h with p q,\nright,\nexact p,\nleft,\nexact q,"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\nintro h,\ncases h with hp hqr,\ncases hqr with q r,\nleft,\nsplit,\nexact hp,\nexact q,\nright,\nsplit,\nexact hp,\nexact r,\n\nintro h,\ncases h with hpq hpr,\ncases hpq with p q,\nsplit,\nexact p,\nleft,\nexact q,\ncases hpr with p r,\nsplit,\nexact p,\nright,\nexact r,"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro h,\ncases h with p np,\nrw not_iff_imp_false at np,\nexfalso,\nexact np p,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "by_cases p : P; by_cases q : Q,\nrepeat {cc},\n\n------------------------------\n\n-- intro h,\n-- intro p,\n-- repeat {rw not_iff_imp_false at h},\n-- \n-- by_cases pn : P; by_cases qn : Q,\n-- \n-- exact qn,\n-- \n-- exfalso,\n-- apply h(qn),\n-- exact p,\n-- \n-- exact qn,\n-- \n-- exfalso,\n-- apply h(qn),\n-- exact p,"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj hs,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\napply succ_inj,\nexact h,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\nrw h,\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\nexact succ_inj,\n--exact succ_eq_succ_of_eq,\nintro h,\nrw h,\nrefl,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\ninduction t with d td,\nrepeat {rw add_zero at h},\nexact h,\nrepeat {rw add_succ at h},\napply td,\napply succ_inj,\nexact h,"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm,\nrw add_comm t,\nexact add_right_cancel a t b,"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\nexact add_right_cancel _ _ _,\nintro h,\nrw h,\nrefl,"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\napply add_left_cancel a,\nrw add_zero,\nexact h,"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\nexact zero_ne_succ a,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with d,\nrefl,\nrw add_succ at H,\nexfalso,\napply succ_ne_zero (a + d),\nexact H,"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\ncases a with d,\nrefl,\nrw succ_add at h,\nexfalso,\napply succ_ne_zero (d + b),\nexact h,"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "rw succ_eq_add_one,\nrefl,\n-- rw one_eq_succ_zero,\n-- rw add_succ,\n-- rw add_zero,\n-- refl,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "induction n with m nm,\nexact zero_ne_succ 0,\nintro h,\napply nm,\napply succ_inj,\nexact h,"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "editorText": "sorry"
    }
  ]
}